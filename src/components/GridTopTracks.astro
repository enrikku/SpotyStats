---
import Image from "astro/components/Image.astro";
---

<script>
  import { getTopTracks, createPlaylist } from "../lib/spotify";
  import { getAccesTokenCookie } from "../lib/utils";

  const tabs = document.querySelectorAll(
    ".tab"
  ) as NodeListOf<HTMLAnchorElement>;
  const gridContainer = document.getElementById("tracksGrid") as HTMLDivElement;
  const createPlaylistBtn = document.getElementById("createPlaylistBtn") as HTMLButtonElement;

  const token = await getAccesTokenCookie();

  type TimeRange = "short_term" | "medium_term" | "long_term";
  type SpotifyTrack = {
    name: string;
    album: {
      name: string;
      images: { url: string }[];
    };
    artists: {
      name: string;
      external_urls: {
        spotify: string;
      };
    }[];
    external_urls: {
      spotify: string;
    };
  };

  const cachedTracks: Record<TimeRange, any> = {
    short_term: null,
    medium_term: null,
    long_term: null,
  };

  let currentRange: TimeRange = "short_term";

  async function loadTracks(range: TimeRange = "short_term") {
    currentRange = range;

    // Mostrar loading state
    gridContainer.innerHTML = Array(50).fill(`
      <div class="card bg-base-200 shadow-xl animate-pulse">
        <div class="aspect-square bg-base-300"></div>
        <div class="card-body p-4">
          <div class="h-4 bg-base-300 rounded w-3/4"></div>
          <div class="h-3 bg-base-300 rounded w-1/2 mt-2"></div>
        </div>
      </div>
    `).join('');

    if (!cachedTracks[range]) {
      cachedTracks[range] = await getTopTracks(token, range);
    }

    const tracks = cachedTracks[range];

    // Crear todos los elementos pero mantenerlos ocultos inicialmente
    const fragment = document.createDocumentFragment();
    const cards: HTMLElement[] = [];

    (tracks as SpotifyTrack[]).forEach((track: SpotifyTrack, i: number) => {
      const card = document.createElement("div");
      card.className = "card bg-base-200 shadow-xl group hover:bg-base-300 transition-colors opacity-0";
      card.style.transition = "opacity 0.3s ease-in-out";
      card.innerHTML = `
        <figure class="relative">
          <img src="${track.album.images[0]?.url}" alt="${track.name}" class="w-full aspect-square object-cover" loading="lazy" />
          <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
            <a href="${track.external_urls.spotify}" 
               target="_blank" 
               rel="noopener noreferrer"
               class="btn btn-circle btn-primary"
               title="Abrir en Spotify">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
              </svg>
            </a>
          </div>
          <div class="absolute top-2 left-2 bg-base-300/80 rounded-full px-3 py-1">
            <span class="text-sm font-bold">#${i + 1}</span>
          </div>
        </figure>
        <div class="card-body p-4">
          <h2 class="card-title text-base truncate">${track.name}</h2>
          <a href="${track.artists[0].external_urls.spotify}" target="_blank" rel="noopener noreferrer" class="text-sm text-base-content/70 truncate hover:text-primary transition-colors">${track.artists.map(a => a.name).join(", ")}</a>
        </div>
      `;
      cards.push(card);
      fragment.appendChild(card);
    });

    gridContainer.innerHTML = '';
    gridContainer.appendChild(fragment);

    // Revelar las cards gradualmente
    cards.forEach((card, index) => {
      setTimeout(() => {
        card.style.opacity = "1";
      }, index * 50); // 50ms de delay entre cada card
    });
  }

  tabs.forEach((tab) => {
    tab.addEventListener("click", function () {
      tabs.forEach((t) => t.classList.remove("tab-active"));
      this.classList.add("tab-active");

      const range = this.dataset.range as TimeRange;
      loadTracks(range);
    });
  });

  createPlaylistBtn.addEventListener("click", async () => {
    try {
      const tracks = cachedTracks[currentRange];
      
      if (tracks) {
        var a = await createPlaylist(token, tracks, currentRange);
        console.log(a);
        alert("¡Playlist creada con éxito!");
      }
    } catch (error) {
      console.error("Error al crear playlist:", error);
      alert("Error al crear la playlist");
    }
  });

  // Carga inicial
  loadTracks("short_term");
</script>

<div class="flex flex-col gap-8 max-w-7xl mx-auto px-4 pb-10">
  <div role="tablist" class="tabs tabs-lift justify-center text-sm sm:text-lg font-medium" id="tabs">
    <p class="tab tab-active" data-range="short_term">Last 4 Weeks</p>
    <p class="tab" data-range="medium_term">Last 6 Months</p>
    <p class="tab" data-range="long_term">Last 12 Months</p>
  </div>

  <div id="tracksGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
  </div>

  <div class="flex justify-center mt-8">
    <button id="createPlaylistBtn" class="btn btn-primary gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="12" y1="5" x2="12" y2="19"></line>
        <line x1="5" y1="12" x2="19" y2="12"></line>
      </svg>
      Crear Playlist
    </button>
  </div>
</div>
